#![deny(missing_docs)]
//! Structured access to the output of `cargo metadata`
//! Usually used from within a `cargo-*` executable

// Forked from `https://github.com/oli-obk/cargo_metadata`
// Modifications:
//   1. Remove `resolve` from Metadata because it was causing parse failures
//   2. Fix the `manifest-path` argument
//   3. Add `--all-features` argument
//   4. Remove the `--no-deps` argument

use std::collections::HashMap;
use std::env;
use std::io;
use std::path::Path;
use std::process::Command;
use std::str::{from_utf8, Utf8Error};

use serde_json;

// Warning: Do not change this without regenerating serde_derive impls.
// See issue #203 and README.serde_derive for more information.
#[derive(Clone, Debug)]
/// Starting point for metadata returned by `cargo metadata`
pub struct Metadata {
    /// A list of all crates referenced by this crate (and the crate itself)
    pub packages: Vec<Package>,
    version: usize,
    /// path to the workspace containing the `Cargo.lock`
    pub workspace_root: String,
}

// Warning: Do not change this without regenerating serde_derive impls.
// See issue #203 and README.serde_derive for more information.
#[derive(Clone, Debug)]
/// A crate
pub struct Package {
    /// Name as given in the `Cargo.toml`
    pub name: String,
    /// Version given in the `Cargo.toml`
    pub version: String,
    id: String,
    source: Option<String>,
    /// List of dependencies of this particular package
    pub dependencies: Vec<Dependency>,
    /// Targets provided by the crate (lib, bin, example, test, ...)
    pub targets: Vec<Target>,
    features: HashMap<String, Vec<String>>,
    /// path containing the `Cargo.toml`
    pub manifest_path: String,
}

// Warning: Do not change this without regenerating serde_derive impls.
// See issue #203 and README.serde_derive for more information.
#[derive(Clone, Debug)]
/// A dependency of the main crate
pub struct Dependency {
    /// Name as given in the `Cargo.toml`
    pub name: String,
    source: Option<String>,
    /// Whether this is required or optional
    pub req: String,
    kind: Option<String>,
    optional: bool,
    uses_default_features: bool,
    features: Vec<String>,
    target: Option<String>,
}

// Warning: Do not change this without regenerating serde_derive impls.
// See issue #203 and README.serde_derive for more information.
#[derive(Clone, Debug)]
/// A single target (lib, bin, example, ...) provided by a crate
pub struct Target {
    /// Name as given in the `Cargo.toml` or generated from the file name
    pub name: String,
    /// Kind of target ("bin", "example", "test", "bench", "lib")
    pub kind: Vec<String>,
    /// Almost the same as `kind`, except when an example is a library instad of an executable.
    /// In that case `crate_types` contains things like `rlib` and `dylib` while `kind` is `example`
    #[cfg_attr(serde_derive, serde(default))]
    pub crate_types: Vec<String>,
    /// Path to the main source file of the target
    pub src_path: String,
}

#[derive(Debug)]
/// Possible errors that can occur during metadata parsing.
pub enum Error {
    /// Error during execution of `cargo metadata`
    Io(io::Error),
    /// Output of `cargo metadata` was not valid utf8
    Utf8(Utf8Error),
    /// Deserialization error (structure of json did not match expected structure)
    Json(serde_json::Error),
}

impl From<io::Error> for Error {
    fn from(err: io::Error) -> Self {
        Error::Io(err)
    }
}
impl From<Utf8Error> for Error {
    fn from(err: Utf8Error) -> Self {
        Error::Utf8(err)
    }
}
impl From<serde_json::Error> for Error {
    fn from(err: serde_json::Error) -> Self {
        Error::Json(err)
    }
}

/// The main entry point to obtaining metadata
pub fn metadata(manifest_path: &Path) -> Result<Metadata, Error> {
    let cargo = env::var("CARGO").unwrap_or_else(|_| String::from("cargo"));
    let mut cmd = Command::new(cargo);
    cmd.arg("metadata");
    cmd.arg("--all-features");
    cmd.arg("--format-version").arg("1");
    cmd.arg("--manifest-path");
    cmd.arg(manifest_path.to_str().unwrap());
    let output = cmd.output()?;
    let stdout = from_utf8(&output.stdout)?;
    let meta: Metadata = serde_json::from_str(stdout)?;
    Ok(meta)
}

// Warning: The following code is autogenerated by serde_derive, don't touch
// unless you know what you're doing. See issue #203 and README.serde_derive
// for more information.

// Generated from `serde_derive 1.80.0`

#[cfg_attr(rustfmt, rustfmt_skip)]
#[allow(non_upper_case_globals,
        unused_attributes,
        unused_qualifications)]
const _IMPL_DESERIALIZE_FOR_Metadata: () =
    {
        #[allow(unknown_lints)]
        #[allow(rust_2018_idioms)]
        extern crate serde as _serde;
        #[allow(unused_macros)]
        macro_rules! try(( $ __expr : expr ) => {
                         match $ __expr {
                         _serde :: export :: Ok ( __val ) => __val
                         , _serde :: export :: Err ( __err ) => {
                         return _serde :: export :: Err ( __err )
                         ; } } });
        #[automatically_derived]
        impl <'de> _serde::Deserialize<'de> for Metadata {
            fn deserialize<__D>(__deserializer: __D)
             -> _serde::export::Result<Self, __D::Error> where
             __D: _serde::Deserializer<'de> {
                #[allow(non_camel_case_types)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __ignore,
                }
                struct __FieldVisitor;
                impl <'de> _serde::de::Visitor<'de> for
                 __FieldVisitor {
                    type
                    Value
                    =
                    __Field;
                    fn expecting(&self,
                                 __formatter:
                                     &mut _serde::export::Formatter)
                     -> _serde::export::fmt::Result {
                        _serde::export::Formatter::write_str(__formatter,
                                                             "field identifier")
                    }
                    fn visit_u64<__E>(self, __value: u64)
                     -> _serde::export::Result<Self::Value, __E>
                     where __E: _serde::de::Error {
                        match __value {
                            0u64 =>
                            _serde::export::Ok(__Field::__field0),
                            1u64 =>
                            _serde::export::Ok(__Field::__field1),
                            2u64 =>
                            _serde::export::Ok(__Field::__field2),
                            _ =>
                            _serde::export::Err(_serde::de::Error::invalid_value(_serde::de::Unexpected::Unsigned(__value),
                                                                                 &"field index 0 <= i < 3")),
                        }
                    }
                    fn visit_str<__E>(self, __value: &str)
                     -> _serde::export::Result<Self::Value, __E>
                     where __E: _serde::de::Error {
                        match __value {
                            "packages" =>
                            _serde::export::Ok(__Field::__field0),
                            "version" =>
                            _serde::export::Ok(__Field::__field1),
                            "workspace_root" =>
                            _serde::export::Ok(__Field::__field2),
                            _ => {
                                _serde::export::Ok(__Field::__ignore)
                            }
                        }
                    }
                    fn visit_bytes<__E>(self, __value: &[u8])
                     -> _serde::export::Result<Self::Value, __E>
                     where __E: _serde::de::Error {
                        match __value {
                            b"packages" =>
                            _serde::export::Ok(__Field::__field0),
                            b"version" =>
                            _serde::export::Ok(__Field::__field1),
                            b"workspace_root" =>
                            _serde::export::Ok(__Field::__field2),
                            _ => {
                                _serde::export::Ok(__Field::__ignore)
                            }
                        }
                    }
                }
                impl <'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(__deserializer: __D)
                     -> _serde::export::Result<Self, __D::Error>
                     where __D: _serde::Deserializer<'de> {
                        _serde::Deserializer::deserialize_identifier(__deserializer,
                                                                     __FieldVisitor)
                    }
                }
                struct __Visitor<'de> {
                    marker: _serde::export::PhantomData<Metadata>,
                    lifetime: _serde::export::PhantomData<&'de ()>,
                }
                impl <'de> _serde::de::Visitor<'de> for
                 __Visitor<'de> {
                    type
                    Value
                    =
                    Metadata;
                    fn expecting(&self,
                                 __formatter:
                                     &mut _serde::export::Formatter)
                     -> _serde::export::fmt::Result {
                        _serde::export::Formatter::write_str(__formatter,
                                                             "struct Metadata")
                    }
                    #[inline]
                    fn visit_seq<__A>(self, mut __seq: __A)
                     ->
                         _serde::export::Result<Self::Value,
                                                __A::Error> where
                     __A: _serde::de::SeqAccess<'de> {
                        let __field0 =
                            match match _serde::de::SeqAccess::next_element::<Vec<Package>>(&mut __seq)
                                      {
                                      _serde::export::Ok(__val) =>
                                      __val,
                                      _serde::export::Err(__err)
                                      => {
                                          return _serde::export::Err(__err);
                                      }
                                  } {
                                _serde::export::Some(__value) =>
                                __value,
                                _serde::export::None => {
                                    return _serde::export::Err(_serde::de::Error::invalid_length(0usize,
                                                                                                 &"struct Metadata with 3 elements"));
                                }
                            };
                        let __field1 =
                            match match _serde::de::SeqAccess::next_element::<usize>(&mut __seq)
                                      {
                                      _serde::export::Ok(__val) =>
                                      __val,
                                      _serde::export::Err(__err)
                                      => {
                                          return _serde::export::Err(__err);
                                      }
                                  } {
                                _serde::export::Some(__value) =>
                                __value,
                                _serde::export::None => {
                                    return _serde::export::Err(_serde::de::Error::invalid_length(1usize,
                                                                                                 &"struct Metadata with 3 elements"));
                                }
                            };
                        let __field2 =
                            match match _serde::de::SeqAccess::next_element::<String>(&mut __seq)
                                      {
                                      _serde::export::Ok(__val) =>
                                      __val,
                                      _serde::export::Err(__err)
                                      => {
                                          return _serde::export::Err(__err);
                                      }
                                  } {
                                _serde::export::Some(__value) =>
                                __value,
                                _serde::export::None => {
                                    return _serde::export::Err(_serde::de::Error::invalid_length(2usize,
                                                                                                 &"struct Metadata with 3 elements"));
                                }
                            };
                        _serde::export::Ok(Metadata{packages:
                                                        __field0,
                                                    version:
                                                        __field1,
                                                    workspace_root:
                                                        __field2,})
                    }
                    #[inline]
                    fn visit_map<__A>(self, mut __map: __A)
                     ->
                         _serde::export::Result<Self::Value,
                                                __A::Error> where
                     __A: _serde::de::MapAccess<'de> {
                        let mut __field0:
                                _serde::export::Option<Vec<Package>> =
                            _serde::export::None;
                        let mut __field1:
                                _serde::export::Option<usize> =
                            _serde::export::None;
                        let mut __field2:
                                _serde::export::Option<String> =
                            _serde::export::None;
                        while let _serde::export::Some(__key) =
                                  match _serde::de::MapAccess::next_key::<__Field>(&mut __map)
                                      {
                                      _serde::export::Ok(__val) =>
                                      __val,
                                      _serde::export::Err(__err)
                                      => {
                                          return _serde::export::Err(__err);
                                      }
                                  } {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::export::Option::is_some(&__field0)
                                       {
                                        return _serde::export::Err(<__A::Error
                                                                       as
                                                                       _serde::de::Error>::duplicate_field("packages"));
                                    }
                                    __field0 =
                                        _serde::export::Some(match _serde::de::MapAccess::next_value::<Vec<Package>>(&mut __map)
                                                                 {
                                                                 _serde::export::Ok(__val)
                                                                 =>
                                                                 __val,
                                                                 _serde::export::Err(__err)
                                                                 =>
                                                                 {
                                                                     return _serde::export::Err(__err);
                                                                 }
                                                             });
                                }
                                __Field::__field1 => {
                                    if _serde::export::Option::is_some(&__field1)
                                       {
                                        return _serde::export::Err(<__A::Error
                                                                       as
                                                                       _serde::de::Error>::duplicate_field("version"));
                                    }
                                    __field1 =
                                        _serde::export::Some(match _serde::de::MapAccess::next_value::<usize>(&mut __map)
                                                                 {
                                                                 _serde::export::Ok(__val)
                                                                 =>
                                                                 __val,
                                                                 _serde::export::Err(__err)
                                                                 =>
                                                                 {
                                                                     return _serde::export::Err(__err);
                                                                 }
                                                             });
                                }
                                __Field::__field2 => {
                                    if _serde::export::Option::is_some(&__field2)
                                       {
                                        return _serde::export::Err(<__A::Error
                                                                       as
                                                                       _serde::de::Error>::duplicate_field("workspace_root"));
                                    }
                                    __field2 =
                                        _serde::export::Some(match _serde::de::MapAccess::next_value::<String>(&mut __map)
                                                                 {
                                                                 _serde::export::Ok(__val)
                                                                 =>
                                                                 __val,
                                                                 _serde::export::Err(__err)
                                                                 =>
                                                                 {
                                                                     return _serde::export::Err(__err);
                                                                 }
                                                             });
                                }
                                _ => {
                                    let _ =
                                        match _serde::de::MapAccess::next_value::<_serde::de::IgnoredAny>(&mut __map)
                                            {
                                            _serde::export::Ok(__val)
                                            => __val,
                                            _serde::export::Err(__err)
                                            => {
                                                return _serde::export::Err(__err);
                                            }
                                        };
                                }
                            }
                        }
                        let __field0 =
                            match __field0 {
                                _serde::export::Some(__field0) =>
                                __field0,
                                _serde::export::None =>
                                match _serde::private::de::missing_field("packages")
                                    {
                                    _serde::export::Ok(__val) =>
                                    __val,
                                    _serde::export::Err(__err) =>
                                    {
                                        return _serde::export::Err(__err);
                                    }
                                },
                            };
                        let __field1 =
                            match __field1 {
                                _serde::export::Some(__field1) =>
                                __field1,
                                _serde::export::None =>
                                match _serde::private::de::missing_field("version")
                                    {
                                    _serde::export::Ok(__val) =>
                                    __val,
                                    _serde::export::Err(__err) =>
                                    {
                                        return _serde::export::Err(__err);
                                    }
                                },
                            };
                        let __field2 =
                            match __field2 {
                                _serde::export::Some(__field2) =>
                                __field2,
                                _serde::export::None =>
                                match _serde::private::de::missing_field("workspace_root")
                                    {
                                    _serde::export::Ok(__val) =>
                                    __val,
                                    _serde::export::Err(__err) =>
                                    {
                                        return _serde::export::Err(__err);
                                    }
                                },
                            };
                        _serde::export::Ok(Metadata{packages:
                                                        __field0,
                                                    version:
                                                        __field1,
                                                    workspace_root:
                                                        __field2,})
                    }
                }
                const FIELDS: &'static [&'static str] =
                    &["packages", "version", "workspace_root"];
                _serde::Deserializer::deserialize_struct(__deserializer,
                                                         "Metadata",
                                                         FIELDS,
                                                         __Visitor{marker:
                                                                       _serde::export::PhantomData::<Metadata>,
                                                                   lifetime:
                                                                       _serde::export::PhantomData,})
            }
        }
    };

#[cfg_attr(rustfmt, rustfmt_skip)]
#[allow(non_upper_case_globals,
        unused_attributes,
        unused_qualifications)]
const _IMPL_DESERIALIZE_FOR_Package: () =
    {
        #[allow(unknown_lints)]
        #[allow(rust_2018_idioms)]
        extern crate serde as _serde;
        #[allow(unused_macros)]
        macro_rules! try(( $ __expr : expr ) => {
                         match $ __expr {
                         _serde :: export :: Ok ( __val ) => __val
                         , _serde :: export :: Err ( __err ) => {
                         return _serde :: export :: Err ( __err )
                         ; } } });
        #[automatically_derived]
        impl <'de> _serde::Deserialize<'de> for Package {
            fn deserialize<__D>(__deserializer: __D)
             -> _serde::export::Result<Self, __D::Error> where
             __D: _serde::Deserializer<'de> {
                #[allow(non_camel_case_types)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                    __ignore,
                }
                struct __FieldVisitor;
                impl <'de> _serde::de::Visitor<'de> for
                 __FieldVisitor {
                    type
                    Value
                    =
                    __Field;
                    fn expecting(&self,
                                 __formatter:
                                     &mut _serde::export::Formatter)
                     -> _serde::export::fmt::Result {
                        _serde::export::Formatter::write_str(__formatter,
                                                             "field identifier")
                    }
                    fn visit_u64<__E>(self, __value: u64)
                     -> _serde::export::Result<Self::Value, __E>
                     where __E: _serde::de::Error {
                        match __value {
                            0u64 =>
                            _serde::export::Ok(__Field::__field0),
                            1u64 =>
                            _serde::export::Ok(__Field::__field1),
                            2u64 =>
                            _serde::export::Ok(__Field::__field2),
                            3u64 =>
                            _serde::export::Ok(__Field::__field3),
                            4u64 =>
                            _serde::export::Ok(__Field::__field4),
                            5u64 =>
                            _serde::export::Ok(__Field::__field5),
                            6u64 =>
                            _serde::export::Ok(__Field::__field6),
                            7u64 =>
                            _serde::export::Ok(__Field::__field7),
                            _ =>
                            _serde::export::Err(_serde::de::Error::invalid_value(_serde::de::Unexpected::Unsigned(__value),
                                                                                 &"field index 0 <= i < 8")),
                        }
                    }
                    fn visit_str<__E>(self, __value: &str)
                     -> _serde::export::Result<Self::Value, __E>
                     where __E: _serde::de::Error {
                        match __value {
                            "name" =>
                            _serde::export::Ok(__Field::__field0),
                            "version" =>
                            _serde::export::Ok(__Field::__field1),
                            "id" =>
                            _serde::export::Ok(__Field::__field2),
                            "source" =>
                            _serde::export::Ok(__Field::__field3),
                            "dependencies" =>
                            _serde::export::Ok(__Field::__field4),
                            "targets" =>
                            _serde::export::Ok(__Field::__field5),
                            "features" =>
                            _serde::export::Ok(__Field::__field6),
                            "manifest_path" =>
                            _serde::export::Ok(__Field::__field7),
                            _ => {
                                _serde::export::Ok(__Field::__ignore)
                            }
                        }
                    }
                    fn visit_bytes<__E>(self, __value: &[u8])
                     -> _serde::export::Result<Self::Value, __E>
                     where __E: _serde::de::Error {
                        match __value {
                            b"name" =>
                            _serde::export::Ok(__Field::__field0),
                            b"version" =>
                            _serde::export::Ok(__Field::__field1),
                            b"id" =>
                            _serde::export::Ok(__Field::__field2),
                            b"source" =>
                            _serde::export::Ok(__Field::__field3),
                            b"dependencies" =>
                            _serde::export::Ok(__Field::__field4),
                            b"targets" =>
                            _serde::export::Ok(__Field::__field5),
                            b"features" =>
                            _serde::export::Ok(__Field::__field6),
                            b"manifest_path" =>
                            _serde::export::Ok(__Field::__field7),
                            _ => {
                                _serde::export::Ok(__Field::__ignore)
                            }
                        }
                    }
                }
                impl <'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(__deserializer: __D)
                     -> _serde::export::Result<Self, __D::Error>
                     where __D: _serde::Deserializer<'de> {
                        _serde::Deserializer::deserialize_identifier(__deserializer,
                                                                     __FieldVisitor)
                    }
                }
                struct __Visitor<'de> {
                    marker: _serde::export::PhantomData<Package>,
                    lifetime: _serde::export::PhantomData<&'de ()>,
                }
                impl <'de> _serde::de::Visitor<'de> for
                 __Visitor<'de> {
                    type
                    Value
                    =
                    Package;
                    fn expecting(&self,
                                 __formatter:
                                     &mut _serde::export::Formatter)
                     -> _serde::export::fmt::Result {
                        _serde::export::Formatter::write_str(__formatter,
                                                             "struct Package")
                    }
                    #[inline]
                    fn visit_seq<__A>(self, mut __seq: __A)
                     ->
                         _serde::export::Result<Self::Value,
                                                __A::Error> where
                     __A: _serde::de::SeqAccess<'de> {
                        let __field0 =
                            match match _serde::de::SeqAccess::next_element::<String>(&mut __seq)
                                      {
                                      _serde::export::Ok(__val) =>
                                      __val,
                                      _serde::export::Err(__err)
                                      => {
                                          return _serde::export::Err(__err);
                                      }
                                  } {
                                _serde::export::Some(__value) =>
                                __value,
                                _serde::export::None => {
                                    return _serde::export::Err(_serde::de::Error::invalid_length(0usize,
                                                                                                 &"struct Package with 8 elements"));
                                }
                            };
                        let __field1 =
                            match match _serde::de::SeqAccess::next_element::<String>(&mut __seq)
                                      {
                                      _serde::export::Ok(__val) =>
                                      __val,
                                      _serde::export::Err(__err)
                                      => {
                                          return _serde::export::Err(__err);
                                      }
                                  } {
                                _serde::export::Some(__value) =>
                                __value,
                                _serde::export::None => {
                                    return _serde::export::Err(_serde::de::Error::invalid_length(1usize,
                                                                                                 &"struct Package with 8 elements"));
                                }
                            };
                        let __field2 =
                            match match _serde::de::SeqAccess::next_element::<String>(&mut __seq)
                                      {
                                      _serde::export::Ok(__val) =>
                                      __val,
                                      _serde::export::Err(__err)
                                      => {
                                          return _serde::export::Err(__err);
                                      }
                                  } {
                                _serde::export::Some(__value) =>
                                __value,
                                _serde::export::None => {
                                    return _serde::export::Err(_serde::de::Error::invalid_length(2usize,
                                                                                                 &"struct Package with 8 elements"));
                                }
                            };
                        let __field3 =
                            match match _serde::de::SeqAccess::next_element::<Option<String>>(&mut __seq)
                                      {
                                      _serde::export::Ok(__val) =>
                                      __val,
                                      _serde::export::Err(__err)
                                      => {
                                          return _serde::export::Err(__err);
                                      }
                                  } {
                                _serde::export::Some(__value) =>
                                __value,
                                _serde::export::None => {
                                    return _serde::export::Err(_serde::de::Error::invalid_length(3usize,
                                                                                                 &"struct Package with 8 elements"));
                                }
                            };
                        let __field4 =
                            match match _serde::de::SeqAccess::next_element::<Vec<Dependency>>(&mut __seq)
                                      {
                                      _serde::export::Ok(__val) =>
                                      __val,
                                      _serde::export::Err(__err)
                                      => {
                                          return _serde::export::Err(__err);
                                      }
                                  } {
                                _serde::export::Some(__value) =>
                                __value,
                                _serde::export::None => {
                                    return _serde::export::Err(_serde::de::Error::invalid_length(4usize,
                                                                                                 &"struct Package with 8 elements"));
                                }
                            };
                        let __field5 =
                            match match _serde::de::SeqAccess::next_element::<Vec<Target>>(&mut __seq)
                                      {
                                      _serde::export::Ok(__val) =>
                                      __val,
                                      _serde::export::Err(__err)
                                      => {
                                          return _serde::export::Err(__err);
                                      }
                                  } {
                                _serde::export::Some(__value) =>
                                __value,
                                _serde::export::None => {
                                    return _serde::export::Err(_serde::de::Error::invalid_length(5usize,
                                                                                                 &"struct Package with 8 elements"));
                                }
                            };
                        let __field6 =
                            match match _serde::de::SeqAccess::next_element::<HashMap<String,
                                                                                      Vec<String>>>(&mut __seq)
                                      {
                                      _serde::export::Ok(__val) =>
                                      __val,
                                      _serde::export::Err(__err)
                                      => {
                                          return _serde::export::Err(__err);
                                      }
                                  } {
                                _serde::export::Some(__value) =>
                                __value,
                                _serde::export::None => {
                                    return _serde::export::Err(_serde::de::Error::invalid_length(6usize,
                                                                                                 &"struct Package with 8 elements"));
                                }
                            };
                        let __field7 =
                            match match _serde::de::SeqAccess::next_element::<String>(&mut __seq)
                                      {
                                      _serde::export::Ok(__val) =>
                                      __val,
                                      _serde::export::Err(__err)
                                      => {
                                          return _serde::export::Err(__err);
                                      }
                                  } {
                                _serde::export::Some(__value) =>
                                __value,
                                _serde::export::None => {
                                    return _serde::export::Err(_serde::de::Error::invalid_length(7usize,
                                                                                                 &"struct Package with 8 elements"));
                                }
                            };
                        _serde::export::Ok(Package{name: __field0,
                                                   version:
                                                       __field1,
                                                   id: __field2,
                                                   source:
                                                       __field3,
                                                   dependencies:
                                                       __field4,
                                                   targets:
                                                       __field5,
                                                   features:
                                                       __field6,
                                                   manifest_path:
                                                       __field7,})
                    }
                    #[inline]
                    fn visit_map<__A>(self, mut __map: __A)
                     ->
                         _serde::export::Result<Self::Value,
                                                __A::Error> where
                     __A: _serde::de::MapAccess<'de> {
                        let mut __field0:
                                _serde::export::Option<String> =
                            _serde::export::None;
                        let mut __field1:
                                _serde::export::Option<String> =
                            _serde::export::None;
                        let mut __field2:
                                _serde::export::Option<String> =
                            _serde::export::None;
                        let mut __field3:
                                _serde::export::Option<Option<String>> =
                            _serde::export::None;
                        let mut __field4:
                                _serde::export::Option<Vec<Dependency>> =
                            _serde::export::None;
                        let mut __field5:
                                _serde::export::Option<Vec<Target>> =
                            _serde::export::None;
                        let mut __field6:
                                _serde::export::Option<HashMap<String,
                                                               Vec<String>>> =
                            _serde::export::None;
                        let mut __field7:
                                _serde::export::Option<String> =
                            _serde::export::None;
                        while let _serde::export::Some(__key) =
                                  match _serde::de::MapAccess::next_key::<__Field>(&mut __map)
                                      {
                                      _serde::export::Ok(__val) =>
                                      __val,
                                      _serde::export::Err(__err)
                                      => {
                                          return _serde::export::Err(__err);
                                      }
                                  } {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::export::Option::is_some(&__field0)
                                       {
                                        return _serde::export::Err(<__A::Error
                                                                       as
                                                                       _serde::de::Error>::duplicate_field("name"));
                                    }
                                    __field0 =
                                        _serde::export::Some(match _serde::de::MapAccess::next_value::<String>(&mut __map)
                                                                 {
                                                                 _serde::export::Ok(__val)
                                                                 =>
                                                                 __val,
                                                                 _serde::export::Err(__err)
                                                                 =>
                                                                 {
                                                                     return _serde::export::Err(__err);
                                                                 }
                                                             });
                                }
                                __Field::__field1 => {
                                    if _serde::export::Option::is_some(&__field1)
                                       {
                                        return _serde::export::Err(<__A::Error
                                                                       as
                                                                       _serde::de::Error>::duplicate_field("version"));
                                    }
                                    __field1 =
                                        _serde::export::Some(match _serde::de::MapAccess::next_value::<String>(&mut __map)
                                                                 {
                                                                 _serde::export::Ok(__val)
                                                                 =>
                                                                 __val,
                                                                 _serde::export::Err(__err)
                                                                 =>
                                                                 {
                                                                     return _serde::export::Err(__err);
                                                                 }
                                                             });
                                }
                                __Field::__field2 => {
                                    if _serde::export::Option::is_some(&__field2)
                                       {
                                        return _serde::export::Err(<__A::Error
                                                                       as
                                                                       _serde::de::Error>::duplicate_field("id"));
                                    }
                                    __field2 =
                                        _serde::export::Some(match _serde::de::MapAccess::next_value::<String>(&mut __map)
                                                                 {
                                                                 _serde::export::Ok(__val)
                                                                 =>
                                                                 __val,
                                                                 _serde::export::Err(__err)
                                                                 =>
                                                                 {
                                                                     return _serde::export::Err(__err);
                                                                 }
                                                             });
                                }
                                __Field::__field3 => {
                                    if _serde::export::Option::is_some(&__field3)
                                       {
                                        return _serde::export::Err(<__A::Error
                                                                       as
                                                                       _serde::de::Error>::duplicate_field("source"));
                                    }
                                    __field3 =
                                        _serde::export::Some(match _serde::de::MapAccess::next_value::<Option<String>>(&mut __map)
                                                                 {
                                                                 _serde::export::Ok(__val)
                                                                 =>
                                                                 __val,
                                                                 _serde::export::Err(__err)
                                                                 =>
                                                                 {
                                                                     return _serde::export::Err(__err);
                                                                 }
                                                             });
                                }
                                __Field::__field4 => {
                                    if _serde::export::Option::is_some(&__field4)
                                       {
                                        return _serde::export::Err(<__A::Error
                                                                       as
                                                                       _serde::de::Error>::duplicate_field("dependencies"));
                                    }
                                    __field4 =
                                        _serde::export::Some(match _serde::de::MapAccess::next_value::<Vec<Dependency>>(&mut __map)
                                                                 {
                                                                 _serde::export::Ok(__val)
                                                                 =>
                                                                 __val,
                                                                 _serde::export::Err(__err)
                                                                 =>
                                                                 {
                                                                     return _serde::export::Err(__err);
                                                                 }
                                                             });
                                }
                                __Field::__field5 => {
                                    if _serde::export::Option::is_some(&__field5)
                                       {
                                        return _serde::export::Err(<__A::Error
                                                                       as
                                                                       _serde::de::Error>::duplicate_field("targets"));
                                    }
                                    __field5 =
                                        _serde::export::Some(match _serde::de::MapAccess::next_value::<Vec<Target>>(&mut __map)
                                                                 {
                                                                 _serde::export::Ok(__val)
                                                                 =>
                                                                 __val,
                                                                 _serde::export::Err(__err)
                                                                 =>
                                                                 {
                                                                     return _serde::export::Err(__err);
                                                                 }
                                                             });
                                }
                                __Field::__field6 => {
                                    if _serde::export::Option::is_some(&__field6)
                                       {
                                        return _serde::export::Err(<__A::Error
                                                                       as
                                                                       _serde::de::Error>::duplicate_field("features"));
                                    }
                                    __field6 =
                                        _serde::export::Some(match _serde::de::MapAccess::next_value::<HashMap<String,
                                                                                                               Vec<String>>>(&mut __map)
                                                                 {
                                                                 _serde::export::Ok(__val)
                                                                 =>
                                                                 __val,
                                                                 _serde::export::Err(__err)
                                                                 =>
                                                                 {
                                                                     return _serde::export::Err(__err);
                                                                 }
                                                             });
                                }
                                __Field::__field7 => {
                                    if _serde::export::Option::is_some(&__field7)
                                       {
                                        return _serde::export::Err(<__A::Error
                                                                       as
                                                                       _serde::de::Error>::duplicate_field("manifest_path"));
                                    }
                                    __field7 =
                                        _serde::export::Some(match _serde::de::MapAccess::next_value::<String>(&mut __map)
                                                                 {
                                                                 _serde::export::Ok(__val)
                                                                 =>
                                                                 __val,
                                                                 _serde::export::Err(__err)
                                                                 =>
                                                                 {
                                                                     return _serde::export::Err(__err);
                                                                 }
                                                             });
                                }
                                _ => {
                                    let _ =
                                        match _serde::de::MapAccess::next_value::<_serde::de::IgnoredAny>(&mut __map)
                                            {
                                            _serde::export::Ok(__val)
                                            => __val,
                                            _serde::export::Err(__err)
                                            => {
                                                return _serde::export::Err(__err);
                                            }
                                        };
                                }
                            }
                        }
                        let __field0 =
                            match __field0 {
                                _serde::export::Some(__field0) =>
                                __field0,
                                _serde::export::None =>
                                match _serde::private::de::missing_field("name")
                                    {
                                    _serde::export::Ok(__val) =>
                                    __val,
                                    _serde::export::Err(__err) =>
                                    {
                                        return _serde::export::Err(__err);
                                    }
                                },
                            };
                        let __field1 =
                            match __field1 {
                                _serde::export::Some(__field1) =>
                                __field1,
                                _serde::export::None =>
                                match _serde::private::de::missing_field("version")
                                    {
                                    _serde::export::Ok(__val) =>
                                    __val,
                                    _serde::export::Err(__err) =>
                                    {
                                        return _serde::export::Err(__err);
                                    }
                                },
                            };
                        let __field2 =
                            match __field2 {
                                _serde::export::Some(__field2) =>
                                __field2,
                                _serde::export::None =>
                                match _serde::private::de::missing_field("id")
                                    {
                                    _serde::export::Ok(__val) =>
                                    __val,
                                    _serde::export::Err(__err) =>
                                    {
                                        return _serde::export::Err(__err);
                                    }
                                },
                            };
                        let __field3 =
                            match __field3 {
                                _serde::export::Some(__field3) =>
                                __field3,
                                _serde::export::None =>
                                match _serde::private::de::missing_field("source")
                                    {
                                    _serde::export::Ok(__val) =>
                                    __val,
                                    _serde::export::Err(__err) =>
                                    {
                                        return _serde::export::Err(__err);
                                    }
                                },
                            };
                        let __field4 =
                            match __field4 {
                                _serde::export::Some(__field4) =>
                                __field4,
                                _serde::export::None =>
                                match _serde::private::de::missing_field("dependencies")
                                    {
                                    _serde::export::Ok(__val) =>
                                    __val,
                                    _serde::export::Err(__err) =>
                                    {
                                        return _serde::export::Err(__err);
                                    }
                                },
                            };
                        let __field5 =
                            match __field5 {
                                _serde::export::Some(__field5) =>
                                __field5,
                                _serde::export::None =>
                                match _serde::private::de::missing_field("targets")
                                    {
                                    _serde::export::Ok(__val) =>
                                    __val,
                                    _serde::export::Err(__err) =>
                                    {
                                        return _serde::export::Err(__err);
                                    }
                                },
                            };
                        let __field6 =
                            match __field6 {
                                _serde::export::Some(__field6) =>
                                __field6,
                                _serde::export::None =>
                                match _serde::private::de::missing_field("features")
                                    {
                                    _serde::export::Ok(__val) =>
                                    __val,
                                    _serde::export::Err(__err) =>
                                    {
                                        return _serde::export::Err(__err);
                                    }
                                },
                            };
                        let __field7 =
                            match __field7 {
                                _serde::export::Some(__field7) =>
                                __field7,
                                _serde::export::None =>
                                match _serde::private::de::missing_field("manifest_path")
                                    {
                                    _serde::export::Ok(__val) =>
                                    __val,
                                    _serde::export::Err(__err) =>
                                    {
                                        return _serde::export::Err(__err);
                                    }
                                },
                            };
                        _serde::export::Ok(Package{name: __field0,
                                                   version:
                                                       __field1,
                                                   id: __field2,
                                                   source:
                                                       __field3,
                                                   dependencies:
                                                       __field4,
                                                   targets:
                                                       __field5,
                                                   features:
                                                       __field6,
                                                   manifest_path:
                                                       __field7,})
                    }
                }
                const FIELDS: &'static [&'static str] =
                    &["name", "version", "id", "source",
                      "dependencies", "targets", "features",
                      "manifest_path"];
                _serde::Deserializer::deserialize_struct(__deserializer,
                                                         "Package",
                                                         FIELDS,
                                                         __Visitor{marker:
                                                                       _serde::export::PhantomData::<Package>,
                                                                   lifetime:
                                                                       _serde::export::PhantomData,})
            }
        }
    };

#[cfg_attr(rustfmt, rustfmt_skip)]
#[allow(non_upper_case_globals,
        unused_attributes,
        unused_qualifications)]
const _IMPL_DESERIALIZE_FOR_Dependency: () =
    {
        #[allow(unknown_lints)]
        #[allow(rust_2018_idioms)]
        extern crate serde as _serde;
        #[allow(unused_macros)]
        macro_rules! try(( $ __expr : expr ) => {
                         match $ __expr {
                         _serde :: export :: Ok ( __val ) => __val
                         , _serde :: export :: Err ( __err ) => {
                         return _serde :: export :: Err ( __err )
                         ; } } });
        #[automatically_derived]
        impl <'de> _serde::Deserialize<'de> for Dependency {
            fn deserialize<__D>(__deserializer: __D)
             -> _serde::export::Result<Self, __D::Error> where
             __D: _serde::Deserializer<'de> {
                #[allow(non_camel_case_types)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                    __ignore,
                }
                struct __FieldVisitor;
                impl <'de> _serde::de::Visitor<'de> for
                 __FieldVisitor {
                    type
                    Value
                    =
                    __Field;
                    fn expecting(&self,
                                 __formatter:
                                     &mut _serde::export::Formatter)
                     -> _serde::export::fmt::Result {
                        _serde::export::Formatter::write_str(__formatter,
                                                             "field identifier")
                    }
                    fn visit_u64<__E>(self, __value: u64)
                     -> _serde::export::Result<Self::Value, __E>
                     where __E: _serde::de::Error {
                        match __value {
                            0u64 =>
                            _serde::export::Ok(__Field::__field0),
                            1u64 =>
                            _serde::export::Ok(__Field::__field1),
                            2u64 =>
                            _serde::export::Ok(__Field::__field2),
                            3u64 =>
                            _serde::export::Ok(__Field::__field3),
                            4u64 =>
                            _serde::export::Ok(__Field::__field4),
                            5u64 =>
                            _serde::export::Ok(__Field::__field5),
                            6u64 =>
                            _serde::export::Ok(__Field::__field6),
                            7u64 =>
                            _serde::export::Ok(__Field::__field7),
                            _ =>
                            _serde::export::Err(_serde::de::Error::invalid_value(_serde::de::Unexpected::Unsigned(__value),
                                                                                 &"field index 0 <= i < 8")),
                        }
                    }
                    fn visit_str<__E>(self, __value: &str)
                     -> _serde::export::Result<Self::Value, __E>
                     where __E: _serde::de::Error {
                        match __value {
                            "name" =>
                            _serde::export::Ok(__Field::__field0),
                            "source" =>
                            _serde::export::Ok(__Field::__field1),
                            "req" =>
                            _serde::export::Ok(__Field::__field2),
                            "kind" =>
                            _serde::export::Ok(__Field::__field3),
                            "optional" =>
                            _serde::export::Ok(__Field::__field4),
                            "uses_default_features" =>
                            _serde::export::Ok(__Field::__field5),
                            "features" =>
                            _serde::export::Ok(__Field::__field6),
                            "target" =>
                            _serde::export::Ok(__Field::__field7),
                            _ => {
                                _serde::export::Ok(__Field::__ignore)
                            }
                        }
                    }
                    fn visit_bytes<__E>(self, __value: &[u8])
                     -> _serde::export::Result<Self::Value, __E>
                     where __E: _serde::de::Error {
                        match __value {
                            b"name" =>
                            _serde::export::Ok(__Field::__field0),
                            b"source" =>
                            _serde::export::Ok(__Field::__field1),
                            b"req" =>
                            _serde::export::Ok(__Field::__field2),
                            b"kind" =>
                            _serde::export::Ok(__Field::__field3),
                            b"optional" =>
                            _serde::export::Ok(__Field::__field4),
                            b"uses_default_features" =>
                            _serde::export::Ok(__Field::__field5),
                            b"features" =>
                            _serde::export::Ok(__Field::__field6),
                            b"target" =>
                            _serde::export::Ok(__Field::__field7),
                            _ => {
                                _serde::export::Ok(__Field::__ignore)
                            }
                        }
                    }
                }
                impl <'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(__deserializer: __D)
                     -> _serde::export::Result<Self, __D::Error>
                     where __D: _serde::Deserializer<'de> {
                        _serde::Deserializer::deserialize_identifier(__deserializer,
                                                                     __FieldVisitor)
                    }
                }
                struct __Visitor<'de> {
                    marker: _serde::export::PhantomData<Dependency>,
                    lifetime: _serde::export::PhantomData<&'de ()>,
                }
                impl <'de> _serde::de::Visitor<'de> for
                 __Visitor<'de> {
                    type
                    Value
                    =
                    Dependency;
                    fn expecting(&self,
                                 __formatter:
                                     &mut _serde::export::Formatter)
                     -> _serde::export::fmt::Result {
                        _serde::export::Formatter::write_str(__formatter,
                                                             "struct Dependency")
                    }
                    #[inline]
                    fn visit_seq<__A>(self, mut __seq: __A)
                     ->
                         _serde::export::Result<Self::Value,
                                                __A::Error> where
                     __A: _serde::de::SeqAccess<'de> {
                        let __field0 =
                            match match _serde::de::SeqAccess::next_element::<String>(&mut __seq)
                                      {
                                      _serde::export::Ok(__val) =>
                                      __val,
                                      _serde::export::Err(__err)
                                      => {
                                          return _serde::export::Err(__err);
                                      }
                                  } {
                                _serde::export::Some(__value) =>
                                __value,
                                _serde::export::None => {
                                    return _serde::export::Err(_serde::de::Error::invalid_length(0usize,
                                                                                                 &"struct Dependency with 8 elements"));
                                }
                            };
                        let __field1 =
                            match match _serde::de::SeqAccess::next_element::<Option<String>>(&mut __seq)
                                      {
                                      _serde::export::Ok(__val) =>
                                      __val,
                                      _serde::export::Err(__err)
                                      => {
                                          return _serde::export::Err(__err);
                                      }
                                  } {
                                _serde::export::Some(__value) =>
                                __value,
                                _serde::export::None => {
                                    return _serde::export::Err(_serde::de::Error::invalid_length(1usize,
                                                                                                 &"struct Dependency with 8 elements"));
                                }
                            };
                        let __field2 =
                            match match _serde::de::SeqAccess::next_element::<String>(&mut __seq)
                                      {
                                      _serde::export::Ok(__val) =>
                                      __val,
                                      _serde::export::Err(__err)
                                      => {
                                          return _serde::export::Err(__err);
                                      }
                                  } {
                                _serde::export::Some(__value) =>
                                __value,
                                _serde::export::None => {
                                    return _serde::export::Err(_serde::de::Error::invalid_length(2usize,
                                                                                                 &"struct Dependency with 8 elements"));
                                }
                            };
                        let __field3 =
                            match match _serde::de::SeqAccess::next_element::<Option<String>>(&mut __seq)
                                      {
                                      _serde::export::Ok(__val) =>
                                      __val,
                                      _serde::export::Err(__err)
                                      => {
                                          return _serde::export::Err(__err);
                                      }
                                  } {
                                _serde::export::Some(__value) =>
                                __value,
                                _serde::export::None => {
                                    return _serde::export::Err(_serde::de::Error::invalid_length(3usize,
                                                                                                 &"struct Dependency with 8 elements"));
                                }
                            };
                        let __field4 =
                            match match _serde::de::SeqAccess::next_element::<bool>(&mut __seq)
                                      {
                                      _serde::export::Ok(__val) =>
                                      __val,
                                      _serde::export::Err(__err)
                                      => {
                                          return _serde::export::Err(__err);
                                      }
                                  } {
                                _serde::export::Some(__value) =>
                                __value,
                                _serde::export::None => {
                                    return _serde::export::Err(_serde::de::Error::invalid_length(4usize,
                                                                                                 &"struct Dependency with 8 elements"));
                                }
                            };
                        let __field5 =
                            match match _serde::de::SeqAccess::next_element::<bool>(&mut __seq)
                                      {
                                      _serde::export::Ok(__val) =>
                                      __val,
                                      _serde::export::Err(__err)
                                      => {
                                          return _serde::export::Err(__err);
                                      }
                                  } {
                                _serde::export::Some(__value) =>
                                __value,
                                _serde::export::None => {
                                    return _serde::export::Err(_serde::de::Error::invalid_length(5usize,
                                                                                                 &"struct Dependency with 8 elements"));
                                }
                            };
                        let __field6 =
                            match match _serde::de::SeqAccess::next_element::<Vec<String>>(&mut __seq)
                                      {
                                      _serde::export::Ok(__val) =>
                                      __val,
                                      _serde::export::Err(__err)
                                      => {
                                          return _serde::export::Err(__err);
                                      }
                                  } {
                                _serde::export::Some(__value) =>
                                __value,
                                _serde::export::None => {
                                    return _serde::export::Err(_serde::de::Error::invalid_length(6usize,
                                                                                                 &"struct Dependency with 8 elements"));
                                }
                            };
                        let __field7 =
                            match match _serde::de::SeqAccess::next_element::<Option<String>>(&mut __seq)
                                      {
                                      _serde::export::Ok(__val) =>
                                      __val,
                                      _serde::export::Err(__err)
                                      => {
                                          return _serde::export::Err(__err);
                                      }
                                  } {
                                _serde::export::Some(__value) =>
                                __value,
                                _serde::export::None => {
                                    return _serde::export::Err(_serde::de::Error::invalid_length(7usize,
                                                                                                 &"struct Dependency with 8 elements"));
                                }
                            };
                        _serde::export::Ok(Dependency{name:
                                                          __field0,
                                                      source:
                                                          __field1,
                                                      req:
                                                          __field2,
                                                      kind:
                                                          __field3,
                                                      optional:
                                                          __field4,
                                                      uses_default_features:
                                                          __field5,
                                                      features:
                                                          __field6,
                                                      target:
                                                          __field7,})
                    }
                    #[inline]
                    fn visit_map<__A>(self, mut __map: __A)
                     ->
                         _serde::export::Result<Self::Value,
                                                __A::Error> where
                     __A: _serde::de::MapAccess<'de> {
                        let mut __field0:
                                _serde::export::Option<String> =
                            _serde::export::None;
                        let mut __field1:
                                _serde::export::Option<Option<String>> =
                            _serde::export::None;
                        let mut __field2:
                                _serde::export::Option<String> =
                            _serde::export::None;
                        let mut __field3:
                                _serde::export::Option<Option<String>> =
                            _serde::export::None;
                        let mut __field4:
                                _serde::export::Option<bool> =
                            _serde::export::None;
                        let mut __field5:
                                _serde::export::Option<bool> =
                            _serde::export::None;
                        let mut __field6:
                                _serde::export::Option<Vec<String>> =
                            _serde::export::None;
                        let mut __field7:
                                _serde::export::Option<Option<String>> =
                            _serde::export::None;
                        while let _serde::export::Some(__key) =
                                  match _serde::de::MapAccess::next_key::<__Field>(&mut __map)
                                      {
                                      _serde::export::Ok(__val) =>
                                      __val,
                                      _serde::export::Err(__err)
                                      => {
                                          return _serde::export::Err(__err);
                                      }
                                  } {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::export::Option::is_some(&__field0)
                                       {
                                        return _serde::export::Err(<__A::Error
                                                                       as
                                                                       _serde::de::Error>::duplicate_field("name"));
                                    }
                                    __field0 =
                                        _serde::export::Some(match _serde::de::MapAccess::next_value::<String>(&mut __map)
                                                                 {
                                                                 _serde::export::Ok(__val)
                                                                 =>
                                                                 __val,
                                                                 _serde::export::Err(__err)
                                                                 =>
                                                                 {
                                                                     return _serde::export::Err(__err);
                                                                 }
                                                             });
                                }
                                __Field::__field1 => {
                                    if _serde::export::Option::is_some(&__field1)
                                       {
                                        return _serde::export::Err(<__A::Error
                                                                       as
                                                                       _serde::de::Error>::duplicate_field("source"));
                                    }
                                    __field1 =
                                        _serde::export::Some(match _serde::de::MapAccess::next_value::<Option<String>>(&mut __map)
                                                                 {
                                                                 _serde::export::Ok(__val)
                                                                 =>
                                                                 __val,
                                                                 _serde::export::Err(__err)
                                                                 =>
                                                                 {
                                                                     return _serde::export::Err(__err);
                                                                 }
                                                             });
                                }
                                __Field::__field2 => {
                                    if _serde::export::Option::is_some(&__field2)
                                       {
                                        return _serde::export::Err(<__A::Error
                                                                       as
                                                                       _serde::de::Error>::duplicate_field("req"));
                                    }
                                    __field2 =
                                        _serde::export::Some(match _serde::de::MapAccess::next_value::<String>(&mut __map)
                                                                 {
                                                                 _serde::export::Ok(__val)
                                                                 =>
                                                                 __val,
                                                                 _serde::export::Err(__err)
                                                                 =>
                                                                 {
                                                                     return _serde::export::Err(__err);
                                                                 }
                                                             });
                                }
                                __Field::__field3 => {
                                    if _serde::export::Option::is_some(&__field3)
                                       {
                                        return _serde::export::Err(<__A::Error
                                                                       as
                                                                       _serde::de::Error>::duplicate_field("kind"));
                                    }
                                    __field3 =
                                        _serde::export::Some(match _serde::de::MapAccess::next_value::<Option<String>>(&mut __map)
                                                                 {
                                                                 _serde::export::Ok(__val)
                                                                 =>
                                                                 __val,
                                                                 _serde::export::Err(__err)
                                                                 =>
                                                                 {
                                                                     return _serde::export::Err(__err);
                                                                 }
                                                             });
                                }
                                __Field::__field4 => {
                                    if _serde::export::Option::is_some(&__field4)
                                       {
                                        return _serde::export::Err(<__A::Error
                                                                       as
                                                                       _serde::de::Error>::duplicate_field("optional"));
                                    }
                                    __field4 =
                                        _serde::export::Some(match _serde::de::MapAccess::next_value::<bool>(&mut __map)
                                                                 {
                                                                 _serde::export::Ok(__val)
                                                                 =>
                                                                 __val,
                                                                 _serde::export::Err(__err)
                                                                 =>
                                                                 {
                                                                     return _serde::export::Err(__err);
                                                                 }
                                                             });
                                }
                                __Field::__field5 => {
                                    if _serde::export::Option::is_some(&__field5)
                                       {
                                        return _serde::export::Err(<__A::Error
                                                                       as
                                                                       _serde::de::Error>::duplicate_field("uses_default_features"));
                                    }
                                    __field5 =
                                        _serde::export::Some(match _serde::de::MapAccess::next_value::<bool>(&mut __map)
                                                                 {
                                                                 _serde::export::Ok(__val)
                                                                 =>
                                                                 __val,
                                                                 _serde::export::Err(__err)
                                                                 =>
                                                                 {
                                                                     return _serde::export::Err(__err);
                                                                 }
                                                             });
                                }
                                __Field::__field6 => {
                                    if _serde::export::Option::is_some(&__field6)
                                       {
                                        return _serde::export::Err(<__A::Error
                                                                       as
                                                                       _serde::de::Error>::duplicate_field("features"));
                                    }
                                    __field6 =
                                        _serde::export::Some(match _serde::de::MapAccess::next_value::<Vec<String>>(&mut __map)
                                                                 {
                                                                 _serde::export::Ok(__val)
                                                                 =>
                                                                 __val,
                                                                 _serde::export::Err(__err)
                                                                 =>
                                                                 {
                                                                     return _serde::export::Err(__err);
                                                                 }
                                                             });
                                }
                                __Field::__field7 => {
                                    if _serde::export::Option::is_some(&__field7)
                                       {
                                        return _serde::export::Err(<__A::Error
                                                                       as
                                                                       _serde::de::Error>::duplicate_field("target"));
                                    }
                                    __field7 =
                                        _serde::export::Some(match _serde::de::MapAccess::next_value::<Option<String>>(&mut __map)
                                                                 {
                                                                 _serde::export::Ok(__val)
                                                                 =>
                                                                 __val,
                                                                 _serde::export::Err(__err)
                                                                 =>
                                                                 {
                                                                     return _serde::export::Err(__err);
                                                                 }
                                                             });
                                }
                                _ => {
                                    let _ =
                                        match _serde::de::MapAccess::next_value::<_serde::de::IgnoredAny>(&mut __map)
                                            {
                                            _serde::export::Ok(__val)
                                            => __val,
                                            _serde::export::Err(__err)
                                            => {
                                                return _serde::export::Err(__err);
                                            }
                                        };
                                }
                            }
                        }
                        let __field0 =
                            match __field0 {
                                _serde::export::Some(__field0) =>
                                __field0,
                                _serde::export::None =>
                                match _serde::private::de::missing_field("name")
                                    {
                                    _serde::export::Ok(__val) =>
                                    __val,
                                    _serde::export::Err(__err) =>
                                    {
                                        return _serde::export::Err(__err);
                                    }
                                },
                            };
                        let __field1 =
                            match __field1 {
                                _serde::export::Some(__field1) =>
                                __field1,
                                _serde::export::None =>
                                match _serde::private::de::missing_field("source")
                                    {
                                    _serde::export::Ok(__val) =>
                                    __val,
                                    _serde::export::Err(__err) =>
                                    {
                                        return _serde::export::Err(__err);
                                    }
                                },
                            };
                        let __field2 =
                            match __field2 {
                                _serde::export::Some(__field2) =>
                                __field2,
                                _serde::export::None =>
                                match _serde::private::de::missing_field("req")
                                    {
                                    _serde::export::Ok(__val) =>
                                    __val,
                                    _serde::export::Err(__err) =>
                                    {
                                        return _serde::export::Err(__err);
                                    }
                                },
                            };
                        let __field3 =
                            match __field3 {
                                _serde::export::Some(__field3) =>
                                __field3,
                                _serde::export::None =>
                                match _serde::private::de::missing_field("kind")
                                    {
                                    _serde::export::Ok(__val) =>
                                    __val,
                                    _serde::export::Err(__err) =>
                                    {
                                        return _serde::export::Err(__err);
                                    }
                                },
                            };
                        let __field4 =
                            match __field4 {
                                _serde::export::Some(__field4) =>
                                __field4,
                                _serde::export::None =>
                                match _serde::private::de::missing_field("optional")
                                    {
                                    _serde::export::Ok(__val) =>
                                    __val,
                                    _serde::export::Err(__err) =>
                                    {
                                        return _serde::export::Err(__err);
                                    }
                                },
                            };
                        let __field5 =
                            match __field5 {
                                _serde::export::Some(__field5) =>
                                __field5,
                                _serde::export::None =>
                                match _serde::private::de::missing_field("uses_default_features")
                                    {
                                    _serde::export::Ok(__val) =>
                                    __val,
                                    _serde::export::Err(__err) =>
                                    {
                                        return _serde::export::Err(__err);
                                    }
                                },
                            };
                        let __field6 =
                            match __field6 {
                                _serde::export::Some(__field6) =>
                                __field6,
                                _serde::export::None =>
                                match _serde::private::de::missing_field("features")
                                    {
                                    _serde::export::Ok(__val) =>
                                    __val,
                                    _serde::export::Err(__err) =>
                                    {
                                        return _serde::export::Err(__err);
                                    }
                                },
                            };
                        let __field7 =
                            match __field7 {
                                _serde::export::Some(__field7) =>
                                __field7,
                                _serde::export::None =>
                                match _serde::private::de::missing_field("target")
                                    {
                                    _serde::export::Ok(__val) =>
                                    __val,
                                    _serde::export::Err(__err) =>
                                    {
                                        return _serde::export::Err(__err);
                                    }
                                },
                            };
                        _serde::export::Ok(Dependency{name:
                                                          __field0,
                                                      source:
                                                          __field1,
                                                      req:
                                                          __field2,
                                                      kind:
                                                          __field3,
                                                      optional:
                                                          __field4,
                                                      uses_default_features:
                                                          __field5,
                                                      features:
                                                          __field6,
                                                      target:
                                                          __field7,})
                    }
                }
                const FIELDS: &'static [&'static str] =
                    &["name", "source", "req", "kind", "optional",
                      "uses_default_features", "features",
                      "target"];
                _serde::Deserializer::deserialize_struct(__deserializer,
                                                         "Dependency",
                                                         FIELDS,
                                                         __Visitor{marker:
                                                                       _serde::export::PhantomData::<Dependency>,
                                                                   lifetime:
                                                                       _serde::export::PhantomData,})
            }
        }
    };

#[cfg_attr(rustfmt, rustfmt_skip)]
#[allow(non_upper_case_globals,
        unused_attributes,
        unused_qualifications)]
const _IMPL_DESERIALIZE_FOR_Target: () =
    {
        #[allow(unknown_lints)]
        #[allow(rust_2018_idioms)]
        extern crate serde as _serde;
        #[allow(unused_macros)]
        macro_rules! try(( $ __expr : expr ) => {
                         match $ __expr {
                         _serde :: export :: Ok ( __val ) => __val
                         , _serde :: export :: Err ( __err ) => {
                         return _serde :: export :: Err ( __err )
                         ; } } });
        #[automatically_derived]
        impl <'de> _serde::Deserialize<'de> for Target {
            fn deserialize<__D>(__deserializer: __D)
             -> _serde::export::Result<Self, __D::Error> where
             __D: _serde::Deserializer<'de> {
                #[allow(non_camel_case_types)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __ignore,
                }
                struct __FieldVisitor;
                impl <'de> _serde::de::Visitor<'de> for
                 __FieldVisitor {
                    type
                    Value
                    =
                    __Field;
                    fn expecting(&self,
                                 __formatter:
                                     &mut _serde::export::Formatter)
                     -> _serde::export::fmt::Result {
                        _serde::export::Formatter::write_str(__formatter,
                                                             "field identifier")
                    }
                    fn visit_u64<__E>(self, __value: u64)
                     -> _serde::export::Result<Self::Value, __E>
                     where __E: _serde::de::Error {
                        match __value {
                            0u64 =>
                            _serde::export::Ok(__Field::__field0),
                            1u64 =>
                            _serde::export::Ok(__Field::__field1),
                            2u64 =>
                            _serde::export::Ok(__Field::__field2),
                            3u64 =>
                            _serde::export::Ok(__Field::__field3),
                            _ =>
                            _serde::export::Err(_serde::de::Error::invalid_value(_serde::de::Unexpected::Unsigned(__value),
                                                                                 &"field index 0 <= i < 4")),
                        }
                    }
                    fn visit_str<__E>(self, __value: &str)
                     -> _serde::export::Result<Self::Value, __E>
                     where __E: _serde::de::Error {
                        match __value {
                            "name" =>
                            _serde::export::Ok(__Field::__field0),
                            "kind" =>
                            _serde::export::Ok(__Field::__field1),
                            "crate_types" =>
                            _serde::export::Ok(__Field::__field2),
                            "src_path" =>
                            _serde::export::Ok(__Field::__field3),
                            _ => {
                                _serde::export::Ok(__Field::__ignore)
                            }
                        }
                    }
                    fn visit_bytes<__E>(self, __value: &[u8])
                     -> _serde::export::Result<Self::Value, __E>
                     where __E: _serde::de::Error {
                        match __value {
                            b"name" =>
                            _serde::export::Ok(__Field::__field0),
                            b"kind" =>
                            _serde::export::Ok(__Field::__field1),
                            b"crate_types" =>
                            _serde::export::Ok(__Field::__field2),
                            b"src_path" =>
                            _serde::export::Ok(__Field::__field3),
                            _ => {
                                _serde::export::Ok(__Field::__ignore)
                            }
                        }
                    }
                }
                impl <'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(__deserializer: __D)
                     -> _serde::export::Result<Self, __D::Error>
                     where __D: _serde::Deserializer<'de> {
                        _serde::Deserializer::deserialize_identifier(__deserializer,
                                                                     __FieldVisitor)
                    }
                }
                struct __Visitor<'de> {
                    marker: _serde::export::PhantomData<Target>,
                    lifetime: _serde::export::PhantomData<&'de ()>,
                }
                impl <'de> _serde::de::Visitor<'de> for
                 __Visitor<'de> {
                    type
                    Value
                    =
                    Target;
                    fn expecting(&self,
                                 __formatter:
                                     &mut _serde::export::Formatter)
                     -> _serde::export::fmt::Result {
                        _serde::export::Formatter::write_str(__formatter,
                                                             "struct Target")
                    }
                    #[inline]
                    fn visit_seq<__A>(self, mut __seq: __A)
                     ->
                         _serde::export::Result<Self::Value,
                                                __A::Error> where
                     __A: _serde::de::SeqAccess<'de> {
                        let __field0 =
                            match match _serde::de::SeqAccess::next_element::<String>(&mut __seq)
                                      {
                                      _serde::export::Ok(__val) =>
                                      __val,
                                      _serde::export::Err(__err)
                                      => {
                                          return _serde::export::Err(__err);
                                      }
                                  } {
                                _serde::export::Some(__value) =>
                                __value,
                                _serde::export::None => {
                                    return _serde::export::Err(_serde::de::Error::invalid_length(0usize,
                                                                                                 &"struct Target with 4 elements"));
                                }
                            };
                        let __field1 =
                            match match _serde::de::SeqAccess::next_element::<Vec<String>>(&mut __seq)
                                      {
                                      _serde::export::Ok(__val) =>
                                      __val,
                                      _serde::export::Err(__err)
                                      => {
                                          return _serde::export::Err(__err);
                                      }
                                  } {
                                _serde::export::Some(__value) =>
                                __value,
                                _serde::export::None => {
                                    return _serde::export::Err(_serde::de::Error::invalid_length(1usize,
                                                                                                 &"struct Target with 4 elements"));
                                }
                            };
                        let __field2 =
                            match match _serde::de::SeqAccess::next_element::<Vec<String>>(&mut __seq)
                                      {
                                      _serde::export::Ok(__val) =>
                                      __val,
                                      _serde::export::Err(__err)
                                      => {
                                          return _serde::export::Err(__err);
                                      }
                                  } {
                                _serde::export::Some(__value) =>
                                __value,
                                _serde::export::None => {
                                    return _serde::export::Err(_serde::de::Error::invalid_length(2usize,
                                                                                                 &"struct Target with 4 elements"));
                                }
                            };
                        let __field3 =
                            match match _serde::de::SeqAccess::next_element::<String>(&mut __seq)
                                      {
                                      _serde::export::Ok(__val) =>
                                      __val,
                                      _serde::export::Err(__err)
                                      => {
                                          return _serde::export::Err(__err);
                                      }
                                  } {
                                _serde::export::Some(__value) =>
                                __value,
                                _serde::export::None => {
                                    return _serde::export::Err(_serde::de::Error::invalid_length(3usize,
                                                                                                 &"struct Target with 4 elements"));
                                }
                            };
                        _serde::export::Ok(Target{name: __field0,
                                                  kind: __field1,
                                                  crate_types:
                                                      __field2,
                                                  src_path:
                                                      __field3,})
                    }
                    #[inline]
                    fn visit_map<__A>(self, mut __map: __A)
                     ->
                         _serde::export::Result<Self::Value,
                                                __A::Error> where
                     __A: _serde::de::MapAccess<'de> {
                        let mut __field0:
                                _serde::export::Option<String> =
                            _serde::export::None;
                        let mut __field1:
                                _serde::export::Option<Vec<String>> =
                            _serde::export::None;
                        let mut __field2:
                                _serde::export::Option<Vec<String>> =
                            _serde::export::None;
                        let mut __field3:
                                _serde::export::Option<String> =
                            _serde::export::None;
                        while let _serde::export::Some(__key) =
                                  match _serde::de::MapAccess::next_key::<__Field>(&mut __map)
                                      {
                                      _serde::export::Ok(__val) =>
                                      __val,
                                      _serde::export::Err(__err)
                                      => {
                                          return _serde::export::Err(__err);
                                      }
                                  } {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::export::Option::is_some(&__field0)
                                       {
                                        return _serde::export::Err(<__A::Error
                                                                       as
                                                                       _serde::de::Error>::duplicate_field("name"));
                                    }
                                    __field0 =
                                        _serde::export::Some(match _serde::de::MapAccess::next_value::<String>(&mut __map)
                                                                 {
                                                                 _serde::export::Ok(__val)
                                                                 =>
                                                                 __val,
                                                                 _serde::export::Err(__err)
                                                                 =>
                                                                 {
                                                                     return _serde::export::Err(__err);
                                                                 }
                                                             });
                                }
                                __Field::__field1 => {
                                    if _serde::export::Option::is_some(&__field1)
                                       {
                                        return _serde::export::Err(<__A::Error
                                                                       as
                                                                       _serde::de::Error>::duplicate_field("kind"));
                                    }
                                    __field1 =
                                        _serde::export::Some(match _serde::de::MapAccess::next_value::<Vec<String>>(&mut __map)
                                                                 {
                                                                 _serde::export::Ok(__val)
                                                                 =>
                                                                 __val,
                                                                 _serde::export::Err(__err)
                                                                 =>
                                                                 {
                                                                     return _serde::export::Err(__err);
                                                                 }
                                                             });
                                }
                                __Field::__field2 => {
                                    if _serde::export::Option::is_some(&__field2)
                                       {
                                        return _serde::export::Err(<__A::Error
                                                                       as
                                                                       _serde::de::Error>::duplicate_field("crate_types"));
                                    }
                                    __field2 =
                                        _serde::export::Some(match _serde::de::MapAccess::next_value::<Vec<String>>(&mut __map)
                                                                 {
                                                                 _serde::export::Ok(__val)
                                                                 =>
                                                                 __val,
                                                                 _serde::export::Err(__err)
                                                                 =>
                                                                 {
                                                                     return _serde::export::Err(__err);
                                                                 }
                                                             });
                                }
                                __Field::__field3 => {
                                    if _serde::export::Option::is_some(&__field3)
                                       {
                                        return _serde::export::Err(<__A::Error
                                                                       as
                                                                       _serde::de::Error>::duplicate_field("src_path"));
                                    }
                                    __field3 =
                                        _serde::export::Some(match _serde::de::MapAccess::next_value::<String>(&mut __map)
                                                                 {
                                                                 _serde::export::Ok(__val)
                                                                 =>
                                                                 __val,
                                                                 _serde::export::Err(__err)
                                                                 =>
                                                                 {
                                                                     return _serde::export::Err(__err);
                                                                 }
                                                             });
                                }
                                _ => {
                                    let _ =
                                        match _serde::de::MapAccess::next_value::<_serde::de::IgnoredAny>(&mut __map)
                                            {
                                            _serde::export::Ok(__val)
                                            => __val,
                                            _serde::export::Err(__err)
                                            => {
                                                return _serde::export::Err(__err);
                                            }
                                        };
                                }
                            }
                        }
                        let __field0 =
                            match __field0 {
                                _serde::export::Some(__field0) =>
                                __field0,
                                _serde::export::None =>
                                match _serde::private::de::missing_field("name")
                                    {
                                    _serde::export::Ok(__val) =>
                                    __val,
                                    _serde::export::Err(__err) =>
                                    {
                                        return _serde::export::Err(__err);
                                    }
                                },
                            };
                        let __field1 =
                            match __field1 {
                                _serde::export::Some(__field1) =>
                                __field1,
                                _serde::export::None =>
                                match _serde::private::de::missing_field("kind")
                                    {
                                    _serde::export::Ok(__val) =>
                                    __val,
                                    _serde::export::Err(__err) =>
                                    {
                                        return _serde::export::Err(__err);
                                    }
                                },
                            };
                        let __field2 =
                            match __field2 {
                                _serde::export::Some(__field2) =>
                                __field2,
                                _serde::export::None =>
                                _serde::export::Default::default(),
                            };
                        let __field3 =
                            match __field3 {
                                _serde::export::Some(__field3) =>
                                __field3,
                                _serde::export::None =>
                                match _serde::private::de::missing_field("src_path")
                                    {
                                    _serde::export::Ok(__val) =>
                                    __val,
                                    _serde::export::Err(__err) =>
                                    {
                                        return _serde::export::Err(__err);
                                    }
                                },
                            };
                        _serde::export::Ok(Target{name: __field0,
                                                  kind: __field1,
                                                  crate_types:
                                                      __field2,
                                                  src_path:
                                                      __field3,})
                    }
                }
                const FIELDS: &'static [&'static str] =
                    &["name", "kind", "crate_types", "src_path"];
                _serde::Deserializer::deserialize_struct(__deserializer,
                                                         "Target",
                                                         FIELDS,
                                                         __Visitor{marker:
                                                                       _serde::export::PhantomData::<Target>,
                                                                   lifetime:
                                                                       _serde::export::PhantomData,})
            }
        }
    };
